// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infrastructure.Data;

#nullable disable

namespace infrastructure.Data.migrations
{
    [DbContext(typeof(SvrpContext))]
    [Migration("20230424002256_addWhitelist")]
    partial class addWhitelist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("core.Entities.WhiteListFormPayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WhiteListFormPayments");
                });

            modelBuilder.Entity("core.Entities.WhiteListForms", b =>
                {
                    b.Property<string>("Discord")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SteamAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("region")
                        .HasColumnType("int");

                    b.HasKey("Discord");

                    b.ToTable("WhiteListForms");
                });
#pragma warning restore 612, 618
        }
    }
}
